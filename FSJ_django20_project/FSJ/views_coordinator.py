from django.core.exceptions import PermissionDeniedfrom django.contrib.auth.decorators import login_required, user_passes_testfrom django.http import HttpResponse, Http404from django.template import loaderfrom .models import *from .utils import *def is_coordinator(usr):    user = get_FSJ_user(usr)    if not isinstance(user, Coordinator):        raise PermissionDenied    return True@login_required@user_passes_test(is_coordinator)def coordinator_home(request, FSJ_user):    context = get_standard_context(FSJ_user)       template = loader.get_template("FSJ/home.html")    return HttpResponse(template.render(context, request))@login_required@user_passes_test(is_coordinator)def coordinator_studentlist(request):    student_list = Student.objects.all()    template = loader.get_template("FSJ/coord_student_list.html")    context = {        'student_list': student_list,    }    return HttpResponse(template.render(context, request))         @login_required@user_passes_test(is_coordinator)def coordinator_studentdetail(request, usr_ccid):    try:        student = Student.objects.get(ccid = usr_ccid)    except Student.DoesNotExist:        raise Http404("Student does not exist")    context = {        'student': student,    }    template = loader.get_template("FSJ/coord_student_view.html")    return HttpResponse(template.render(context, request))